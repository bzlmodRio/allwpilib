load("//shared/bazel/rules:cc_rules.bzl", "wpilib_cc_library")
load("//shared/bazel/rules:objectivec_rules.bzl", "wpilib_objc_library")

COMMON_SOURCES = [
    "src/internal.h",
    "src/platform.h",
    "src/mappings.h",
    "src/context.c",
    "src/init.c",
    "src/input.c",
    "src/monitor.c",
    "src/platform.c",
    "src/vulkan.c",
    "src/window.c",
    "src/egl_context.c",
    "src/osmesa_context.c",
    "src/null_platform.h",
    "src/null_joystick.h",
    "src/null_init.c",
    "src/null_monitor.c",
    "src/null_window.c",
    "src/null_joystick.c",
] + [
]

############################
# Linux
############################

LINUX_DEFINES = ["_GLFW_X11"]

LINUX_LINKOPTS = []

LINUX_SOURCES = COMMON_SOURCES + [
    "src/posix_time.h",
    "src/posix_thread.h",
    "src/posix_module.c",
    "src/posix_time.c",
    "src/posix_thread.c",
    "src/x11_platform.h",
    "src/xkb_unicode.h",
    "src/x11_init.c",
    "src/x11_monitor.c",
    "src/x11_window.c",
    "src/xkb_unicode.c",
    "src/glx_context.c",
    "src/linux_joystick.h",
    "src/linux_joystick.c",
    "src/posix_poll.h",
    "src/posix_poll.c",
]

############################
# Windows
############################

WINDOWS_DEFINES = [
    "_GLFW_WIN32",
    "GLFW_INVALID_CODEPOINT",
]

WINDOWS_LINKOPTS = [
    "-DEFAULTLIB:user32.lib",
    "-DEFAULTLIB:gdi32.lib",
    "-DEFAULTLIB:shell32.lib",
]

WINDOWS_SOURCES = COMMON_SOURCES + [
    "src/win32_time.h",
    "src/win32_thread.h",
    "src/win32_module.c",
    "src/win32_time.c",
    "src/win32_thread.c",
    "src/win32_platform.h",
    "src/win32_joystick.h",
    "src/win32_init.c",
    "src/win32_joystick.c",
    "src/win32_monitor.c",
    "src/win32_window.c",
    "src/wgl_context.c",
]

############################
# Mac
############################
DARWIN_DEFINES = [
    "_GLFW_COCOA",
    "_GLFW_NSGL",
    "_GLFW_NO_DLOAD_WINMM",
    "_GLFW_USE_OPENGL",
]

DARWIN_LINKOPTS = []

DARWIN_SOURCES = COMMON_SOURCES + [
    "src/cocoa_time.h",
    "src/cocoa_time.c",
    "src/posix_thread.h",
    "src/posix_module.c",
    "src/posix_thread.c",
    "src/cocoa_platform.h",
    "src/cocoa_joystick.h",
    "src/cocoa_init.m",
    "src/cocoa_joystick.m",
    "src/cocoa_monitor.m",
    "src/cocoa_window.m",
    "src/nsgl_context.m",
]

wpilib_cc_library(
    name = "glfw_hdrs",
    hdrs = [
        "include/GLFW/glfw3.h",
        "include/GLFW/glfw3native.h",
    ],
    includes = [
        "include",
    ],
    strip_include_prefix = "include",
)

wpilib_cc_library(
    name = "glfw_src",
    srcs = select({
        "@bazel_tools//src/conditions:windows": WINDOWS_SOURCES,
        "@rules_bzlmodrio_toolchains//constraints/combined:is_linux": LINUX_SOURCES,
    }),
    defines = select({
        "@bazel_tools//src/conditions:windows": WINDOWS_DEFINES,
        "@rules_bzlmodrio_toolchains//constraints/combined:is_linux": LINUX_DEFINES,
    }),
    tags = ["manual"],
    deps = [
        ":glfw_hdrs",
    ],
)

wpilib_objc_library(
    name = "glfw_src_darwin",
    srcs = DARWIN_SOURCES,
    copts = [
        "-fno-objc-arc",
        "-Wno-unused-parameter",
        "-Wno-unused-command-line-argument",
    ],
    defines = DARWIN_DEFINES + ["GLFW_INVALID_CODEPOINT"],
    include_arc = False,
    is_cpp = False,
    deps = [
        ":glfw_hdrs",
    ],
)

wpilib_cc_library(
    name = "glfw",
    linkopts = select({
        "@bazel_tools//src/conditions:darwin": DARWIN_LINKOPTS,
        "@bazel_tools//src/conditions:windows": WINDOWS_LINKOPTS,
        "@rules_bzlmodrio_toolchains//constraints/combined:is_linux": LINUX_LINKOPTS,
    }),
    linkstatic = True,
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    visibility = ["//thirdparty/imgui_suite:__subpackages__"],
    deps = [":glfw_hdrs"] + select({
        "@bazel_tools//src/conditions:darwin": [":glfw_src_darwin"],
        "@bazel_tools//src/conditions:windows": [":glfw_src"],
        "@rules_bzlmodrio_toolchains//constraints/combined:is_linux": [":glfw_src"],
    }),
)

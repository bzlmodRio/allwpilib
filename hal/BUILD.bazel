load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_pkg//:mappings.bzl", "pkg_files")
load("@rules_python//python:defs.bzl", "py_binary")
load("//hal:generate.bzl", "generate_hal")
load("//shared/bazel/rules:cc_rules.bzl", "third_party_cc_lib_helper", "wpilib_cc_library", "wpilib_cc_static_library")
load("//shared/bazel/rules:java_rules.bzl", "wpilib_java_junit5_test")
load("//shared/bazel/rules:jni_rules.bzl", "wpilib_jni_cc_library", "wpilib_jni_java_library")

filegroup(
    name = "templates",
    srcs = glob(["src/generate/*"]),
)

py_binary(
    name = "generate_usage_reporting",
    srcs = ["generate_usage_reporting.py"],
    data = [":templates"],
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

generate_hal(
    name = "generate_hal_files",
)

write_source_files(
    name = "write_hal",
    files = {
        "src/generated": ":generate_hal_files",
    },
    suggested_update_target = "//:write_all",
    tags = ["pregeneration"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "generated_cc_headers",
    hdrs = glob(["src/generated/main/native/include/**"]),
    includes = ["src/generated/main/native/include"],
    strip_include_prefix = "src/generated/main/native/include",
    visibility = ["//hal:__subpackages__"],
)

filegroup(
    name = "generated_java",
    srcs = glob(["src/generated/main/java/**/*.java"]),
    visibility = ["//hal:__subpackages__"],
)

ATHENA_SRCS = glob(["src/main/native/athena/**"])

ATHENA_DEPS = ["@bzlmodrio-ni//libraries/cpp/ni:shared"]

SIM_SRCS = glob(["src/main/native/sim/**"])

SIM_DEPS = []

HAL_DEPS = select({
    "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ATHENA_DEPS,
    "//conditions:default": SIM_DEPS,
})

filegroup(
    name = "platform-srcs",
    srcs = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ATHENA_SRCS,
        "//conditions:default": SIM_SRCS,
    }),
)

pkg_files(
    name = "hal-sim-pkg",
    srcs = glob(["src/main/native/sim/**"]),
    strip_prefix = "src/main/native",
)

pkg_files(
    name = "hal-roborio-pkg",
    srcs = glob(["src/main/native/athena/**"]),
    strip_prefix = "src/main/native",
)

wpilib_cc_library(
    name = "wpiHal",
    srcs = [":platform-srcs"] + glob(
        ["src/main/native/cpp/**"],
        exclude = ["src/main/native/cpp/jni/**"],
    ),
    hdrs = glob(["src/main/native/include/**/*"]),
    extra_src_pkg_files = [
        ":hal-sim-pkg",
        ":hal-roborio-pkg",
        ":hal-java-jni-hdrs-pkg",
    ],
    includes = ["src/main/native/include"],
    strip_include_prefix = "src/main/native/include",
    visibility = ["//visibility:public"],
    deps = [
        ":generated_cc_headers",
        "//wpiutil",
    ] + HAL_DEPS,
)

wpilib_cc_static_library(
    name = "static/wpiHal",
    static_deps = [
        "//wpiutil:static/wpiutil",
    ] + select({
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": [
            "//ntcore:static/ntcore",
            "//wpinet:static/wpinet",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":wpiHal",
    ],
)

wpilib_jni_cc_library(
    name = "wpiHaljni",
    srcs = glob(["src/main/native/cpp/jni/**"]),
    java_dep = ":hal-java",
    visibility = ["//visibility:public"],
    deps = [
        ":wpiHal",
    ],
)

wpilib_jni_java_library(
    name = "hal-java",
    srcs = [":generated_java"] + glob(["src/main/java/**/*.java"]),
    native_libs = [":wpiHaljni"],
    visibility = ["//visibility:public"],
    deps = [
        "//wpiutil:wpiutil-java",
    ],
)

cc_test(
    name = "hal-cpp-test",
    size = "small",
    srcs = glob(["src/test/native/**/*.cpp"]),
    deps = [
        ":wpiHal",
        "//thirdparty/googletest",
    ],
)

wpilib_java_junit5_test(
    name = "hal-java-test",
    srcs = glob(["src/test/java/**/*.java"]),
    deps = [
        ":hal-java",
    ],
)

cc_binary(
    name = "DevMain-Cpp",
    srcs = ["src/dev/native/cpp/main.cpp"],
    deps = [
        ":wpiHal",
    ],
)

java_binary(
    name = "DevMain-Java",
    srcs = ["src/dev/java/edu/wpi/first/hal/DevMain.java"],
    main_class = "edu.wpi.first.hal.DevMain",
    deps = [
    ],
)

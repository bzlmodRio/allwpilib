load("@allwpilib_pip_deps//:requirements.bzl", "requirement")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("@rules_java//java:defs.bzl", "java_binary")
load("@rules_pkg//:mappings.bzl", "pkg_files")
load("@rules_python//python:defs.bzl", "py_binary")
load("//hal:generate.bzl", "generate_hal")
load("//hal:robotpy_native_build_info.bzl", "define_native_wrapper")
load("//hal:robotpy_pybind_build_info.bzl", "define_pybind_library", "hal_simulation_extension", "wpihal_extension")
load("//shared/bazel/rules:cc_rules.bzl", "third_party_cc_lib_helper", "wpilib_shared_and_static_library")
load("//shared/bazel/rules:java_rules.bzl", "wpilib_java_junit5_test")
load("//shared/bazel/rules:jni_rules.bzl", "wpilib_jni_cc_library", "wpilib_jni_java_library")
load("//shared/bazel/rules:packaging.bzl", "zip_java_srcs")
load("//shared/bazel/rules/publishing:publishing.bzl", "bundle_default_jni_library")
load("//shared/bazel/rules/robotpy:build_info_gen.bzl", "generate_robotpy_native_wrapper_build_info", "generate_robotpy_pybind_build_info")
load("//shared/bazel/rules/robotpy:pytest_util.bzl", "robotpy_py_test")

filegroup(
    name = "proto_files",
    srcs = glob(["src/mrc/proto/**/*.proto"]),
)

py_binary(
    name = "generate_nanopb",
    srcs = ["generate_nanopb.py"],
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

generate_hal(
    name = "generate_hal_files",
    proto_files = ":proto_files",
)

write_source_files(
    name = "write_hal",
    files = {
        "src/generated": ":generate_hal_files",
    },
    suggested_update_target = "//:write_all",
    tags = ["pregeneration"],
    visibility = ["//visibility:public"],
)

third_party_cc_lib_helper(
    name = "mrc",
    include_root = "src/mrc/include",
)

cc_library(
    name = "generated_mrc_cc_headers",
    hdrs = glob(["src/generated/main/native/cpp/mrc/protobuf/*.npb.h"]),
    includes = ["src/generated/main/native/cpp/mrc/protobuf"],
    strip_include_prefix = "src/generated/main/native/cpp/mrc/protobuf",
    visibility = ["//hal:__subpackages__"],
    alwayslink = True,
)

SYSTEMCORE_SRCS = glob(["src/main/native/systemcore/**"])

SIM_SRCS = glob(["src/main/native/sim/**"])

filegroup(
    name = "platform-srcs",
    srcs = select({
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": SYSTEMCORE_SRCS,
        "//conditions:default": SIM_SRCS,
    }),
)

pkg_files(
    name = "hal-sim-pkg",
    srcs = glob(["src/main/native/sim/**"]),
    strip_prefix = "src/main/native",
)

pkg_files(
    name = "hal-systemcore-pkg",
    srcs = glob(["src/main/native/systemcore/**"]),
    strip_prefix = "src/main/native",
)

wpilib_shared_and_static_library(
    name = "wpiHal",
    srcs = [":platform-srcs"] + glob(
        [
            "src/main/native/cpp/**",
            "src/generated/main/native/cpp/**",
        ],
        exclude = ["src/main/native/cpp/jni/**"],
    ),
    hdrs = glob(["src/main/native/include/**/*"]),
    dynamic_deps = [
        "//wpiutil:shared/wpiutil",
    ] + select({
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": [
            "//ntcore:shared/ntcore",
            "//wpinet:shared/wpinet",
        ],
        "//conditions:default": [],
    }),
    extra_src_pkg_files = [
        ":hal-sim-pkg",
        ":hal-systemcore-pkg",
        ":hal-java-jni-hdrs-pkg",
    ],
    includes = ["src/main/native/include"],
    static_deps = [
        "//wpiutil:static/wpiutil",
    ] + select({
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": [
            "//ntcore:static/ntcore",
            "//wpinet:static/wpinet",
        ],
        "//conditions:default": [],
    }),
    strip_include_prefix = "src/main/native/include",
    third_party_header_only_libraries = [
        ":mrc",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":generated_mrc_cc_headers",
        "//wpiutil",
    ] + select({
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": [
            "//ntcore",
            "//wpinet",
        ],
        "//conditions:default": [
            "//ntcore:ntcore_c_headers",
        ],
    }),
)

wpilib_jni_cc_library(
    name = "wpiHaljni",
    srcs = glob(["src/main/native/cpp/jni/**"]),
    dynamic_deps = [
        ":shared/wpiHal",
        "//wpiutil:shared/wpiutil",
    ],
    java_dep = ":hal-java",
    visibility = ["//visibility:public"],
    deps = [
        ":wpiHal",
    ],
)

wpilib_jni_java_library(
    name = "hal-java",
    srcs = glob(["src/main/java/**/*.java"]),
    native_libs = [":wpiHaljni"],
    visibility = ["//visibility:public"],
    deps = [
        "//ntcore:ntcore-java",
        "//wpinet:wpinet-java",
        "//wpiutil:wpiutil-java",
    ],
)

zip_java_srcs(name = "wpiHal")

cc_test(
    name = "hal-cpp-test",
    size = "small",
    srcs = glob(["src/test/native/**/*.cpp"]),
    deps = [
        ":wpiHal",
        "//thirdparty/googletest",
    ],
)

wpilib_java_junit5_test(
    name = "hal-java-test",
    srcs = glob(["src/test/java/**/*.java"]),
    deps = [
        ":hal-java",
    ],
)

cc_binary(
    name = "DevMain-Cpp",
    srcs = ["src/dev/native/cpp/main.cpp"],
    deps = [
        ":wpiHal",
    ],
)

java_binary(
    name = "DevMain-Java",
    srcs = ["src/dev/java/edu/wpi/first/hal/DevMain.java"],
    main_class = "edu.wpi.first.hal.DevMain",
    deps = [
    ],
)

bundle_default_jni_library(
    name = "publishing_bundle",
    group_id = "edu.wpi.first.hal",
    library_base_name = "hal",
    library_name = "wpiHal",
)

generate_robotpy_native_wrapper_build_info(
    name = "robotpy-native-wpihal-generator",
    pyproject_toml = "src/main/python/native-pyproject.toml",
)

define_native_wrapper(
    name = "robotpy-native-wpihal",
    # pyproject_toml = "src/main/python/native-pyproject.toml",
)

generate_robotpy_pybind_build_info(
    name = "robotpy-hal-generator",
    additional_srcs = [":robotpy-native-wpihal.copy_headers"],
    package_root_file = "src/main/python/hal/__init__.py",
    pkgcfgs = [
        "//datalog:src/main/python/wpilog/wpilog.pc",
        "//ntcore:src/main/python/ntcore/ntcore.pc",
        "//wpinet:src/main/python/wpinet/wpinet.pc",
        "//wpiutil:src/main/python/wpiutil/wpiutil.pc",
        "//wpiutil:src/main/python/wpiutil/wpiutil-casters.pc",
        "//wpiutil:src/main/python/wpiutil/wpiutil-casters.pybind11.json",
        "//hal:native/wpihal/robotpy-native-wpihal.pc",
        "//ntcore:native/ntcore/robotpy-native-ntcore.pc",
        "//datalog:native/datalog/robotpy-native-datalog.pc",
        "//wpinet:native/wpinet/robotpy-native-wpinet.pc",
        "//wpiutil:native/wpiutil/robotpy-native-wpiutil.pc",
    ],
    yaml_files = glob(["src/main/python/semiwrap/**/*.yml"]),
)

hal_simulation_extension(
    srcs = glob(["src/main/python/hal/simulation/*.cpp"]),
    extra_hdrs = glob(["src/main/python/hal/simulation/*.h"]),
    includes = ["src/main/python/hal/simulation"],
)

wpihal_extension(
    srcs = ["src/main/python/hal/src/hal.cpp"],
)

define_pybind_library(name = "robotpy-hal")

robotpy_py_test(
    "python_tests",
    extra_sources = ["src/test/python/conftest.py"],
    tests = glob(
        ["src/test/python/**/*.py"],
        exclude = [
            "src/test/python/conftest.py",
            "src/test/python/run_tests.py",
        ],
    ),
    deps = [
        ":robotpy-hal",
        requirement("pytest"),
    ],
)

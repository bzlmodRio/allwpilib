mostrobotpy_url = "https://github.com/robotpy/mostrobotpy.git"
allwpilib_url = "git@github.com:bzlmodRio/allwpilib.git"

PROJECTS = [
    struct(
        wpilib_name = "wpiutil",
        robotpy_name = "robotpy-wpiutil",
        native_robotpy_name = "robotpy-native-wpiutil",
        has_tests = True,
    ),
    struct(
        wpilib_name = "wpinet",
        robotpy_name = "robotpy-wpinet",
        native_robotpy_name = "robotpy-native-wpinet",
        has_tests = True,
    ),
    struct(
        wpilib_name = "wpimath",
        robotpy_name = "robotpy-wpimath",
        native_robotpy_name = "robotpy-native-wpimath",
        has_tests = True,
    ),
    struct(
        wpilib_name = "datalog",
        robotpy_name = "robotpy-wpilog",
        native_robotpy_name = "robotpy-native-datalog",
        has_tests = True,
    ),
    struct(
        wpilib_name = "hal",
        robotpy_name = "robotpy-hal",
        native_robotpy_name = "robotpy-native-wpihal",
        has_tests = True,
    ),
    struct(
        wpilib_name = "ntcore",
        robotpy_name = "pyntcore",
        native_robotpy_name = "robotpy-native-ntcore",
        has_tests = True,
    ),
    struct(
        wpilib_name = "apriltag",
        robotpy_name = "robotpy-apriltag",
        native_robotpy_name = "robotpy-native-apriltag",
        has_tests = True,
    ),
    struct(
        wpilib_name = "wpilibc",
        robotpy_name = "robotpy-wpilib",
        native_robotpy_name = "robotpy-native-wpilib",
        has_tests = True,
    ),
]

def get_robotpy_to_allwpilib_info():
    origin_files = []
    destination_files = []
    transformations = []

    for project_info in PROJECTS:
        origin_files += glob([
            "subprojects/" + project_info.robotpy_name + "/**",
            "subprojects/" + project_info.native_robotpy_name + "/pyproject.toml"
        ], exclude = ["**/meson.build", "**/.gitignore", "**/requirements.txt"])

        destination_files += glob([
            project_info.wpilib_name + "/src/main/python/**",
            project_info.wpilib_name + "/src/test/python/**",
        ], exclude = [])

        if project_info.has_tests:
            transformations.append(core.move("subprojects/" + project_info.robotpy_name + "/tests", project_info.wpilib_name + "/src/test/python"))
        transformations.append(core.move("subprojects/" + project_info.native_robotpy_name + "/pyproject.toml", "subprojects/" + project_info.native_robotpy_name + "/native-pyproject.toml"))
        transformations.append(core.move("subprojects/" + project_info.robotpy_name, project_info.wpilib_name + "/src/main/python"))
        transformations.append(core.move("subprojects/" + project_info.native_robotpy_name + "/native-pyproject.toml", project_info.wpilib_name + "/src/main/python/native-pyproject.toml"))

    return origin_files, destination_files, transformations

origin_files, destination_files, transformations = get_robotpy_to_allwpilib_info()

core.workflow(
    name = "mostrobotpy_to_allwpilib",
    origin = git.origin(
        url = mostrobotpy_url,
        ref = "initial-2027",
    ),
    # destination = git.destination(
    #     url = "file:///home/pjreiniger/git/allwpilib",
    #     fetch = "test_copybara",
    #     push = "test_copybara",
    # ),
    destination = git.github_pr_destination(
        url = allwpilib_url,
        destination_ref = "mvp_robotpy",
        pr_branch = "mostrobotpy_to_allwpilib",
        title = "[copybara] Sync mostrobotpy",
        body = "",
        integrates = [],
    ),
    destination_files = destination_files,
    origin_files = origin_files,
    authoring = authoring.pass_thru("Default email <default@default.com>"),
    transformations = transformations,
)

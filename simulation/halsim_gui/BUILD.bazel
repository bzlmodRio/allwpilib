load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_test")
load("//shared/bazel/rules:cc_rules.bzl", "wpilib_cc_library")
load("//shared/bazel/rules/publishing:publishing.bzl", "bundle_library_artifacts")

wpilib_cc_library(
    name = "halsim_gui",
    srcs = glob([
        "src/main/native/cpp/*",
        "src/main/native/include/*.h",
    ]),
    include_license_files = True,
    includes = ["src/main/native/include"],
    tags = [
        "wpi-cpp-gui",
    ],
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        "//glass:libglassnt",
        "//hal:wpiHal.static",
    ],
)

cc_test(
    name = "halsim_gui-test",
    size = "small",
    srcs = glob([
        "src/test/native/**/*.cpp",
        "src/test/native/**/*.h",
    ]),
    tags = [
        "no-asan",
        "wpi-cpp-gui",
    ],
    deps = [
        ":halsim_gui",
        "//thirdparty/googletest:googletest.static",
    ],
)

cc_binary(
    name = "DevMain-Cpp",
    srcs = ["src/dev/native/cpp/main.cpp"],
    tags = [
        "wpi-cpp-gui",
    ],
    deps = [
        ":halsim_gui",
    ],
)

bundle_library_artifacts(
    name = "publishing_bundle",
    add_cc_suffix = False,
    cc_hdr_pkg = ":halsim_gui-hdrs-zip",
    cc_src_pkg = ":halsim_gui-srcs-zip",
    cc_static_library_pkg = ":halsim_gui-zip",
    library_base_name = "halsim_gui",
    group_id = "edu.wpi.first.halsim",
)

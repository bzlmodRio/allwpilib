load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("//shared/bazel/rules:cc_rules.bzl", "wpilib_cc_library")
load("//shared/bazel/rules/publishing:publishing.bzl", "bundle_library_artifacts")

cc_library(
    name = "headers",
    hdrs = glob(["src/main/native/include/**"]),
    includes = ["src/main/native/include"],
)

wpilib_cc_library(
    name = "halsim_ds_socket",
    srcs = glob(["src/main/native/cpp/**"]),
    include_license_files = True,
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
        "//hal:wpiHal.static",
        "//wpinet:wpinet.static",
    ],
)

cc_test(
    name = "halsim_ds_socket-test",
    size = "small",
    srcs = glob([
        "src/test/native/**/*.cpp",
        "src/test/native/**/*.h",
    ]),
    deps = [
        "//simulation/halsim_ds_socket",
        "//thirdparty/googletest:googletest.static",
    ],
)

cc_binary(
    name = "DevMain-Cpp",
    srcs = ["src/dev/native/cpp/main.cpp"],
    deps = [
        ":halsim_ds_socket",
    ],
)

bundle_library_artifacts(
    name = "publishing_bundle",
    add_cc_suffix = False,
    cc_hdr_pkg = ":halsim_ds_socket-hdrs-zip",
    cc_src_pkg = ":halsim_ds_socket-srcs-zip",
    cc_static_library_pkg = ":halsim_ds_socket-zip",
    group_id = "edu.wpi.first.halsim",
    library_base_name = "halsim_ds_socket",
)

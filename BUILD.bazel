load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@rules_java//java:java_binary.bzl", "java_binary")
load("@rules_pkg//:mappings.bzl", "pkg_files")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")

pkg_files(
    name = "license_pkg_files",
    srcs = [
        "LICENSE.md",
        "ThirdPartyNotices.txt",
    ],
    visibility = ["//visibility:public"],
)

# bazel build //:requirements.lock
compile_pip_requirements(
    name = "requirements",
    extra_args = ["--allow-unsafe"],
    requirements_in = "requirements.txt",
    requirements_txt = "requirements_lock.txt",
    requirements_windows = "//:requirements_windows_lock.txt",
    # compile_pip_requirements does not respect target_compatible_with for some of the targets it generates under the hood
    tags = ["no-systemcore"],
)

java_binary(
    name = "copybara",
    main_class = "com.google.copybara.Main",
    runtime_deps = ["@com_github_google_copybara//jar"],
)

alias(
    name = "quickbuf_protoc",
    actual = select({
        "@bazel_tools//src/conditions:darwin": "@quickbuffer_protoc_osx//file",
        "@bazel_tools//src/conditions:windows": "@quickbuffer_protoc_windows//file",
        "@rules_bzlmodrio_toolchains//constraints/combined:is_linux": "@quickbuffer_protoc_linux//file",
    }),
    tags = ["pregeneration"],
    visibility = ["//visibility:public"],
)

# This is a helper to run all of the pregeneration scripts at once.
write_source_files(
    name = "write_pregenerated_sources",
    additional_update_targets = [
        "//hal:write_hal",
        "//ntcore:write_ntcore",
        "//wpilibc:write_wpilibc",
        "//wpilibcExamples:write_example_project_list",
        "//wpilibj:write_wpilibj",
        "//wpilibjExamples:write_example_project_list",
        "//wpilibNewCommands:write_wpilib_new_commands",
        "//wpimath:write_wpimath",
        "//wpiunits:write_wpiunits",
        "//wpiutil:write_wpiutil",
    ],
    tags = ["pregeneration"],
)

write_source_files(
    name = "write_robotpy_generated_native_files",
    additional_update_targets = [
        "//apriltag:robotpy-native-apriltag-generator.generate_build_info",
        "//datalog:robotpy-native-datalog-generator.generate_build_info",
        "//hal:robotpy-native-wpihal-generator.generate_build_info",
        "//ntcore:robotpy-native-ntcore-generator.generate_build_info",
        "//wpilibc:robotpy-native-wpilib-generator.generate_build_info",
        "//wpinet:robotpy-native-wpinet-generator.generate_build_info",
        "//wpimath:robotpy-native-wpimath-generator.generate_build_info",
        "//wpiutil:robotpy-native-wpiutil-generator.generate_build_info",
    ],
    tags = ["pregeneration"],
)

write_source_files(
    name = "write_robotpy_generated_pybind_files",
    additional_update_targets = [
        "//apriltag:robotpy-apriltag-generator.generate_build_info",
        "//datalog:robotpy-datalog-generator.generate_build_info",
        "//hal:robotpy-hal-generator.generate_build_info",
        "//ntcore:pyntcore-generator.generate_build_info",
        "//wpilibc:robotpy-wpilib-generator.generate_build_info",
        "//wpinet:robotpy-wpinet-generator.generate_build_info",
        "//wpimath:robotpy-wpimath-generator.generate_build_info",
        "//wpimath:robotpy-wpimath_test-generator.generate_build_info",
        "//wpiutil:robotpy-wpiutil-generator.generate_build_info",
    ],
    tags = ["pregeneration"],
)

write_source_files(
    name = "write_all",
    additional_update_targets = [
        ":write_pregenerated_sources",
        ":write_robotpy_generated_native_files",
    ],
    tags = ["pregeneration"],
)

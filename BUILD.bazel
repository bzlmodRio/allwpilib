load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")

filegroup(
    name = "license",
    srcs = [
        "LICENSE.md",
        "ThirdPartyNotices.txt",
    ],
    visibility = ["//visibility:public"],
)

# bazel build //:requirements.lock
compile_pip_requirements(
    name = "requirements",
    extra_args = ["--allow-unsafe"],
    requirements_in = "requirements.txt",
    requirements_txt = "requirements_lock.txt",
    tags = [
        "no-bullseye",
        "no-raspi",
        "no-roborio",
    ],
)

alias(
    name = "quickbuf_protoc",
    actual = select({
        "@bazel_tools//src/conditions:darwin": "@quickbuffer_protoc_osx//file",
        "@bazel_tools//src/conditions:windows": "@quickbuffer_protoc_windows//file",
        "@rules_bzlmodrio_toolchains//constraints/combined:is_linux": "@quickbuffer_protoc_linux//file",
    }),
    visibility = ["//visibility:public"],
)

write_source_files(
    name = "write_all",
    additional_update_targets = [
        "//hal:write_hal",
        "//ntcore:write_ntcore",
        "//wpilibc:write_wpilibc",
        "//wpilibcExamples:write_example_project_list",
        "//wpilibj:write_wpilibj",
        "//wpilibjExamples:write_example_project_list",
        "//wpilibNewCommands:write_wpilib_new_commands",
        "//wpimath:write_wpimath",
        "//wpiunits:write_wpiunits",
    ],
)

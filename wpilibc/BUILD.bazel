load("@allwpilib_pip_deps//:requirements.bzl", "requirement")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@rules_cc//cc:cc_shared_library.bzl", "cc_shared_library")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("@rules_python//python:defs.bzl", "py_binary")
load("//shared/bazel/rules:cc_rules.bzl", "third_party_cc_lib_helper", "wpilib_cc_library", "wpilib_cc_static_library")
load("//shared/bazel/rules/gen:gen-version-file.bzl", "generate_version_file")
load("//shared/bazel/rules/robotpy:build_info_gen.bzl", "generate_robotpy_native_wrapper_build_info", "generate_robotpy_pybind_build_info")
load("//shared/bazel/rules/robotpy:pytest_util.bzl", "robotpy_py_test")
load("//wpilibc:generate.bzl", "generate_wpilibc")
load("//wpilibc:robotpy_native_build_info.bzl", "define_native_wrapper")
load("//wpilibc:robotpy_pybind_build_info.bzl", "define_pybind_library", "wpilib_counter_extension", "wpilib_drive_extension", "wpilib_event_extension", "wpilib_extension", "wpilib_interfaces_extension", "wpilib_simulation_extension")

py_binary(
    name = "generate_hids",
    srcs = ["generate_hids.py"],
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [requirement("jinja2")],
)

py_binary(
    name = "generate_pwm_motor_controllers",
    srcs = ["generate_pwm_motor_controllers.py"],
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [requirement("jinja2")],
)

py_binary(
    name = "generate_wpilibc_py",
    srcs = ["generate_wpilibc.py"],
    main = "generate_wpilibc.py",
    target_compatible_with = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ["@platforms//:incompatible"],
        "@rules_bzlmodrio_toolchains//constraints/is_systemcore:systemcore": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":generate_hids",
        ":generate_pwm_motor_controllers",
    ],
)

filegroup(
    name = "templates",
    srcs = glob(["src/generate/main/native/**"]) + [
        "//wpilibj:hid_schema",
        "//wpilibj:pwm_schema",
    ],
)

generate_wpilibc(
    name = "generate_wpilibc",
)

generate_version_file(
    name = "generate-version",
    output_file = "WPILibVersion.cpp",
    template = "src/generate/WPILibVersion.cpp.in",
)

write_source_files(
    name = "write_wpilibc",
    files = {
        "src/generated": ":generate_wpilibc",
    },
    suggested_update_target = "//:write_all",
    tags = ["pregeneration"],
    visibility = ["//visibility:public"],
)

third_party_cc_lib_helper(
    name = "generated_cc",
    include_root = "src/generated/main/native/include",
    src_root = "src/generated/main/native/cpp",
)

wpilib_cc_library(
    name = "wpilibc",
    srcs = [
        ":generate-version",
    ] + glob([
        "src/main/native/cppcs/**",
        "src/main/native/cpp/**",
    ]),
    hdrs = glob(["src/main/native/include/**"]),
    copts = [
        # TODO(austin): this needs to be different for shared vs dynamic.
        "-DDYNAMIC_CAMERA_SERVER",
    ],
    include_license_files = True,
    strip_include_prefix = "src/main/native/include",
    third_party_libraries = [
        ":generated_cc",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//cameraserver:cameraserver-headers",
        "//cscore:cscore-headers",
        "//datalog",
        "//hal:wpiHal",
        "//ntcore",
        "//ntcore:ntcore-headers",
        "//wpimath",
        "//wpinet",
        "//wpiutil",
    ],
)

wpilib_cc_static_library(
    name = "static/wpilibc",
    static_deps = [
        "//datalog:static/datalog",
        "//hal:static/wpiHal",
        "//ntcore:static/ntcore",
        "//wpimath:static/wpimath",
        "//wpinet:static/wpinet",
        "//wpiutil:static/wpiutil",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":wpilibc",
    ],
)

cc_shared_library(
    name = "shared/wpilibc",
    dynamic_deps = [
        "//datalog:shared/datalog",
        "//hal:shared/wpiHal",
        "//ntcore:shared/ntcore",
        "//wpimath:shared/wpimath",
        "//wpinet:shared/wpinet",
        "//wpiutil:shared/wpiutil",
    ],
    user_link_flags = select({
        "@rules_bzlmodrio_toolchains//constraints/combined:is_linux": [
            "-Xlinker",
            "-rpath",
            "$ORIGIN/../../../../datalog/native/datalog/lib",
            "-Xlinker",
            "-rpath",
            "$ORIGIN/../../../../hal/native/wpihal/lib",
            "-Xlinker",
            "-rpath",
            "$ORIGIN/../../../../ntcore/native/ntcore/lib",
            "-Xlinker",
            "-rpath",
            "$ORIGIN/../../../../wpimath/native/wpimath/lib",
            "-Xlinker",
            "-rpath",
            "$ORIGIN/../../../../wpinet/native/wpinet/lib",
            "-Xlinker",
            "-rpath",
            "$ORIGIN/../../../../wpiutil/native/wpiutil/lib",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [":wpilibc"],
)

cc_library(
    name = "test-headers",
    testonly = True,
    hdrs = glob(["src/test/native/include/**"]),
    includes = ["src/test/native/include"],
)

cc_test(
    name = "wpilibc-test",
    size = "small",
    srcs = glob(["src/test/native/cpp/**"]),
    tags = [
        "no-asan",
        "no-tsan",
        "no-ubsan",
    ],
    deps = [
        ":test-headers",
        ":wpilibc",
        "//thirdparty/googletest",
    ],
)

cc_binary(
    name = "DevMain-Cpp",
    srcs = ["src/dev/native/cpp/main.cpp"],
    deps = [
        ":wpilibc",
    ],
)

generate_robotpy_native_wrapper_build_info(
    name = "robotpy-native-wpilib-generator",
    pyproject_toml = "src/main/python/native-pyproject.toml",
)

define_native_wrapper(
    name = "robotpy-native-wpilib",
    pyproject_toml = "src/main/python/native-pyproject.toml",
)

generate_robotpy_pybind_build_info(
    name = "robotpy-wpilib-generator",
    additional_srcs = [
        "src/main/python/wpilib/src/rpy/Filesystem.h",
        "src/main/python/wpilib/src/rpy/Notifier.h",
        "src/main/python/wpilib/src/rpy/MotorControllerGroup.h",
    ] + [":robotpy-native-wpilib.copy_headers"],
    package_root_file = "src/main/python/wpilib/__init__.py",
    pkgcfgs = [
        "//datalog:src/main/python/wpilog/wpilog.pc",
        "//ntcore:src/main/python/ntcore/ntcore.pc",
        "//wpinet:src/main/python/wpinet/wpinet.pc",
        "//hal:src/main/python/hal/wpihal.pc",
        "//wpiutil:src/main/python/wpiutil/wpiutil.pc",
        "//wpiutil:src/main/python/wpiutil/wpiutil-casters.pc",
        "//wpiutil:src/main/python/wpiutil/wpiutil-casters.pybind11.json",
        "//wpimath:src/main/python/wpimath/wpimath.pc",
        "//wpimath:src/main/python/wpimath/filter/wpimath_filter.pc",
        "//wpimath:src/main/python/wpimath/geometry/wpimath_geometry.pc",
        "//wpimath:src/main/python/wpimath/kinematics/wpimath_kinematics.pc",
        "//wpimath:src/main/python/wpimath/spline/wpimath_spline.pc",
        "//wpimath:src/main/python/wpimath/_controls/wpimath_controls.pc",
        "//wpimath:src/main/python/wpimath/wpimath-casters.pc",
        "//wpimath:src/main/python/wpimath/wpimath-casters.pybind11.json",
        "//wpimath:native/wpimath/robotpy-native-wpimath.pc",
        "//wpilibc:native/wpilib/robotpy-native-wpilib.pc",
        "//hal:native/wpihal/robotpy-native-wpihal.pc",
        "//ntcore:native/ntcore/robotpy-native-ntcore.pc",
        "//datalog:native/datalog/robotpy-native-datalog.pc",
        "//wpinet:native/wpinet/robotpy-native-wpinet.pc",
        "//wpiutil:native/wpiutil/robotpy-native-wpiutil.pc",
    ],
    yaml_files = glob(["src/main/python/semiwrap/**/*.yml"]),
)

wpilib_event_extension(
    srcs = ["src/main/python/wpilib/event/event.cpp"],
)

wpilib_interfaces_extension(
    srcs = ["src/main/python/wpilib/interfaces/interfaces.cpp"],
)

wpilib_extension(
    srcs = glob(["src/main/python/wpilib/src/**/*.cpp"]),
    extra_hdrs = glob([
        "src/main/python/wpilib/src/rpy/*.h",
        "src/main/python/wpilib/src/rpy/*.inc",
    ]),
    header_to_dat_deps = glob(["src/main/python/wpilib/src/**"]),
    includes = [
        "src/main/python/wpilib",
        "src/main/python/wpilib/src",
    ],
)

wpilib_counter_extension(
    srcs = ["src/main/python/wpilib/counter/counter.cpp"],
    header_to_dat_deps = glob([
        "src/main/python/wpilib/src/rpy/*.h",
        "src/main/python/wpilib/src/rpy/*.inc",
    ]),
)

wpilib_drive_extension(
    srcs = ["src/main/python/wpilib/drive/drive.cpp"],
    header_to_dat_deps = glob([
        "src/main/python/wpilib/src/rpy/*.h",
        "src/main/python/wpilib/src/rpy/*.inc",
    ]),
)

wpilib_simulation_extension(
    srcs = ["src/main/python/wpilib/simulation/simulation.cpp"],
    header_to_dat_deps = glob([
        "src/main/python/wpilib/src/rpy/*.h",
        "src/main/python/wpilib/src/rpy/*.inc",
    ]),
)

define_pybind_library(name = "robotpy-wpilib")

robotpy_py_test(
    "python_tests",
    extra_sources = ["src/test/python/conftest.py"],
    tests = glob(
        ["src/test/python/**/*.py"],
        exclude = [
            "src/test/python/conftest.py",
            "src/test/python/run_tests.py",
        ],
    ),
    deps = [
        ":robotpy-wpilib",
        requirement("pytest"),
    ],
)
